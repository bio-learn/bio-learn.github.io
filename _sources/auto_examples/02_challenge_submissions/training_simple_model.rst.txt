
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_challenge_submissions/training_simple_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_challenge_submissions_training_simple_model.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_challenge_submissions_training_simple_model.py:


Training an ElasticNet model
=============================================================

This example shows you how to train a simple elasticnet model and use it to submit to the challenge

.. GENERATED FROM PYTHON SOURCE LINES 9-11

Loading up the data for the competition
---------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 11-18

.. code-block:: default

    import pandas as pd

    #Download the data file for the warmup challenge linked here https://www.synapse.org/#!Synapse:syn52966292/wiki/625231
    DOWNLOADED_DATA_FILE_PATH="ADD YOUR PATH HERE"
    challenge_data = pd.read_csv(DOWNLOADED_DATA_FILE_PATH, index_col=0)
    challenge_data


.. GENERATED FROM PYTHON SOURCE LINES 19-21

Load up some training data
------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 21-26

.. code-block:: default

    from biolearn.data_library import DataLibrary
    data = DataLibrary().get("GSE40279").load()
    data.metadata



.. GENERATED FROM PYTHON SOURCE LINES 27-30

Narrow down what sites are correlated with age
 --------------------------------------------------------------------------------------------------------------------------
NOTE: This takes a long time to run

.. GENERATED FROM PYTHON SOURCE LINES 30-65

.. code-block:: default

    import numpy as np
    from sklearn.linear_model import LinearRegression

    # Extract data from your 'data' object
    X = data.dnam.transpose().values  # Transpose to have samples as rows and cpg sites as columns
    y = data.metadata['age'].values

    # Parameters for bootstrap and feature selection
    n_bootstrap = 20
    threshold = 0.05 

    # Store count of times each CpG site is deemed significant
    cpg_counts = np.zeros(X.shape[1])

    # Begin bootstrap iterations
    for _ in range(n_bootstrap):
        # Sample with replacement from X, y
        sample_idx = np.random.choice(range(X.shape[0]), size=X.shape[0], replace=True)
        X_sample = X[sample_idx]
        y_sample = y[sample_idx]
    
        # Train model
        model = LinearRegression()
        model.fit(X_sample, y_sample)
    
        # Identify significant CpG sites (based on magnitude of coefficients)
        significant_cpgs = np.where(np.abs(model.coef_) > threshold)[0]
        cpg_counts[significant_cpgs] += 1

    # Determine stable CpG sites
    stable_cpg_sites = np.where(cpg_counts > n_bootstrap * 0.6)[0]
    stable_cpg_names = data.dnam.index[stable_cpg_sites].tolist()

    print(f"Stable CpG sites (associated with age in more than 60% of bootstrap samples): {stable_cpg_sites}")


.. GENERATED FROM PYTHON SOURCE LINES 66-68

Seperate data into training and test sets
--------------------------------------------------------------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 68-79

.. code-block:: default

    from sklearn.model_selection import train_test_split

    df = data.dnam.transpose()
    df['age'] = data.metadata['age']
    top_sites_df = df[stable_cpg_names]

    X = top_sites_df
    y = df['age']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


.. GENERATED FROM PYTHON SOURCE LINES 80-85

Train a model using elastic net
--------------------------------------------------------------------------------------------------------------------------
Define the model
alpha is the regularization strength, and l1_ratio defines the mix between L1 and L2
l1_ratio = 1 is Lasso; l1_ratio = 0 is Ridge.

.. GENERATED FROM PYTHON SOURCE LINES 85-98

.. code-block:: default

    from sklearn.linear_model import ElasticNet
    from sklearn.metrics import mean_squared_error

    model = ElasticNet(alpha=0.01, l1_ratio=0.3, max_iter=10000)
    # Train the model
    model.fit(X_train, y_train)

    # Predict and evaluate
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)

    print(f"Mean Squared Error on Test Data: {mse}")


.. GENERATED FROM PYTHON SOURCE LINES 99-101

Plot the results to see how good our model is
--------------------------------------------------------------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 101-122

.. code-block:: default

    import matplotlib.pyplot as plt

    y_pred = model.predict(X_test)

    plt.figure(figsize=(10, 8))
    plt.scatter(y_test, y_pred, alpha=0.7, edgecolors='w', linewidth=0.5)
    plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], 'k--', lw=3)  # y=x line for reference
    plt.xlabel('Actual Age')
    plt.ylabel('Predicted Age')
    plt.title('Actual Age vs. Predicted Age')
    plt.grid(True, which='both', linestyle='--', linewidth=0.5)
    plt.show()

    # Calculate Mean Squared Error (MSE)
    mse = np.mean((y_test - y_pred) ** 2)
    print(f"Mean Squared Error (MSE): {mse:.4f}")

    # Calculate Mean Absolute Error (MAE)
    mae = np.mean(np.abs(y_test - y_pred))
    print(f"Mean Absolute Error (MAE): {mae:.4f}")


.. GENERATED FROM PYTHON SOURCE LINES 123-125

Run the challenge data through the model
--------------------------------------------------------------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 125-130

.. code-block:: default


    pruned_data = challenge_data.T[stable_cpg_names]
    pruned_data = pruned_data.fillna(0)
    challenge_results = model.predict(pruned_data)


.. GENERATED FROM PYTHON SOURCE LINES 131-133

Save the results as an output file for submission
--------------------------------------------------------------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 133-138

.. code-block:: default


    predicted_age_df = pd.DataFrame({
        'predictedAge': challenge_results
    }, index=challenge_data.columns)
    predicted_age_df.index.name = 'sampleId'
    predicted_age_df

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.000 seconds)

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_auto_examples_02_challenge_submissions_training_simple_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/bio-learn/biolearn/0.3.1?urlpath=lab/tree/notebooks/auto_examples/02_challenge_submissions/training_simple_model.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: training_simple_model.py <training_simple_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: training_simple_model.ipynb <training_simple_model.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
