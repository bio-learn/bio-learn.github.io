
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_challenge_submissions/plot_challenge_data.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_challenge_submissions_plot_challenge_data.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_challenge_submissions_plot_challenge_data.py:


Exploring the Challenge Data
=============================================================

This example shows you how to load and explore the challenge data with biolearn

.. GENERATED FROM PYTHON SOURCE LINES 9-11

Loading up the data for the competition
---------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 11-15

.. code-block:: Python

    from biolearn.data_library import DataLibrary

    challenge_data = DataLibrary().get("BoAChallengeData").load()








.. GENERATED FROM PYTHON SOURCE LINES 16-18

The challenge data has methylation data
---------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 18-23

.. code-block:: Python


    import pandas as pd
    pd.options.display.max_columns = 6
    challenge_data.dnam






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>GSM7866999</th>
          <th>GSM7867305</th>
          <th>GSM7867077</th>
          <th>...</th>
          <th>GSM7867431</th>
          <th>GSM7867126</th>
          <th>GSM7867000</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>cg00000029</th>
          <td>0.720084</td>
          <td>0.453491</td>
          <td>0.535564</td>
          <td>...</td>
          <td>0.487361</td>
          <td>0.337215</td>
          <td>0.062426</td>
        </tr>
        <tr>
          <th>cg00000109</th>
          <td>0.938044</td>
          <td>0.925149</td>
          <td>0.949446</td>
          <td>...</td>
          <td>0.938523</td>
          <td>0.940187</td>
          <td>0.942090</td>
        </tr>
        <tr>
          <th>cg00000155</th>
          <td>0.957093</td>
          <td>0.959030</td>
          <td>0.948919</td>
          <td>...</td>
          <td>0.966912</td>
          <td>0.968026</td>
          <td>0.970274</td>
        </tr>
        <tr>
          <th>cg00000158</th>
          <td>0.965191</td>
          <td>0.957272</td>
          <td>0.967278</td>
          <td>...</td>
          <td>0.971039</td>
          <td>0.969745</td>
          <td>0.969660</td>
        </tr>
        <tr>
          <th>cg00000165</th>
          <td>0.144061</td>
          <td>0.122099</td>
          <td>0.167346</td>
          <td>...</td>
          <td>0.156199</td>
          <td>0.133038</td>
          <td>0.641788</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>rs9292570</th>
          <td>0.523412</td>
          <td>0.980810</td>
          <td>0.986609</td>
          <td>...</td>
          <td>0.525876</td>
          <td>0.537722</td>
          <td>0.538440</td>
        </tr>
        <tr>
          <th>rs9363764</th>
          <td>0.960815</td>
          <td>0.038638</td>
          <td>0.451884</td>
          <td>...</td>
          <td>0.978343</td>
          <td>0.971838</td>
          <td>0.973633</td>
        </tr>
        <tr>
          <th>rs951295</th>
          <td>0.971034</td>
          <td>0.558011</td>
          <td>0.553397</td>
          <td>...</td>
          <td>0.485287</td>
          <td>0.526686</td>
          <td>0.499980</td>
        </tr>
        <tr>
          <th>rs966367</th>
          <td>0.455920</td>
          <td>0.963994</td>
          <td>0.453094</td>
          <td>...</td>
          <td>0.455700</td>
          <td>0.029342</td>
          <td>0.026907</td>
        </tr>
        <tr>
          <th>rs9839873</th>
          <td>0.599735</td>
          <td>0.595571</td>
          <td>0.630871</td>
          <td>...</td>
          <td>0.576566</td>
          <td>0.579195</td>
          <td>0.973815</td>
        </tr>
      </tbody>
    </table>
    <p>930659 rows × 500 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 24-26

The challenge data also has proteomic data
---------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 26-29

.. code-block:: Python


    challenge_data.protein






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>GSM7867173</th>
          <th>GSM7867127</th>
          <th>GSM7867083</th>
          <th>...</th>
          <th>GSM7867095</th>
          <th>GSM7867115</th>
          <th>GSM7867385</th>
        </tr>
        <tr>
          <th>AlamarTargetID</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>t10319</th>
          <td>13.387778</td>
          <td>12.948052</td>
          <td>13.256551</td>
          <td>...</td>
          <td>12.062449</td>
          <td>13.390582</td>
          <td>13.587867</td>
        </tr>
        <tr>
          <th>t10413</th>
          <td>16.674015</td>
          <td>15.992939</td>
          <td>15.547946</td>
          <td>...</td>
          <td>14.827118</td>
          <td>15.872686</td>
          <td>15.584386</td>
        </tr>
        <tr>
          <th>t10466</th>
          <td>12.890963</td>
          <td>13.556167</td>
          <td>13.528756</td>
          <td>...</td>
          <td>14.683530</td>
          <td>13.667331</td>
          <td>13.483932</td>
        </tr>
        <tr>
          <th>t10563</th>
          <td>10.933342</td>
          <td>8.323690</td>
          <td>13.271350</td>
          <td>...</td>
          <td>9.993500</td>
          <td>11.699095</td>
          <td>11.860206</td>
        </tr>
        <tr>
          <th>t10876</th>
          <td>14.063506</td>
          <td>15.429302</td>
          <td>13.582464</td>
          <td>...</td>
          <td>11.978461</td>
          <td>6.654607</td>
          <td>11.931614</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>t8333</th>
          <td>14.725785</td>
          <td>13.537733</td>
          <td>14.848917</td>
          <td>...</td>
          <td>13.729721</td>
          <td>13.787099</td>
          <td>14.055526</td>
        </tr>
        <tr>
          <th>t8334</th>
          <td>13.503408</td>
          <td>12.103376</td>
          <td>13.381374</td>
          <td>...</td>
          <td>13.070087</td>
          <td>14.317681</td>
          <td>14.314627</td>
        </tr>
        <tr>
          <th>t8358</th>
          <td>12.734120</td>
          <td>15.238780</td>
          <td>11.673970</td>
          <td>...</td>
          <td>13.103683</td>
          <td>13.949114</td>
          <td>13.794795</td>
        </tr>
        <tr>
          <th>t8367</th>
          <td>11.062422</td>
          <td>12.291734</td>
          <td>12.604654</td>
          <td>...</td>
          <td>11.803189</td>
          <td>14.313347</td>
          <td>13.830717</td>
        </tr>
        <tr>
          <th>t8399</th>
          <td>11.599597</td>
          <td>14.642498</td>
          <td>14.590723</td>
          <td>...</td>
          <td>12.073775</td>
          <td>14.184558</td>
          <td>12.040475</td>
        </tr>
      </tbody>
    </table>
    <p>374 rows × 503 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 30-32

You can learn more about what the protein identifies in our reference
---------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 32-38

.. code-block:: Python


    from biolearn.util import get_data_file

    reference = pd.read_csv(get_data_file("reference/alamar_reference.csv"))
    reference






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>AlamarTargetID</th>
          <th>UniProtID</th>
          <th>Target</th>
          <th>ProteinName</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>t10034</td>
          <td>O75888</td>
          <td>TNFSF13</td>
          <td>TNF superfamily member 13</td>
        </tr>
        <tr>
          <th>1</th>
          <td>t10319</td>
          <td>O95760</td>
          <td>IL33</td>
          <td>Interleukin 33</td>
        </tr>
        <tr>
          <th>2</th>
          <td>t10412</td>
          <td>P01258</td>
          <td>CALCA</td>
          <td>Calcitonin [Cleaved into: Calcitonin; Katacalcin</td>
        </tr>
        <tr>
          <th>3</th>
          <td>t10417</td>
          <td>P01903</td>
          <td>HLA-DRA</td>
          <td>Major histocompatibility complex, class II, DR...</td>
        </tr>
        <tr>
          <th>4</th>
          <td>t10433</td>
          <td>P02745</td>
          <td>C1QA</td>
          <td>Complement C1q A chain</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>317</th>
          <td>t8244</td>
          <td>P35247</td>
          <td>SFTPD</td>
          <td>Pulmonary surfactant-associated protein D</td>
        </tr>
        <tr>
          <th>318</th>
          <td>t8246</td>
          <td>P22303</td>
          <td>ACHE</td>
          <td>Acetylcholinesterase</td>
        </tr>
        <tr>
          <th>319</th>
          <td>t8254</td>
          <td>Q8N474</td>
          <td>SFRP1</td>
          <td>Secreted frizzled-related protein 1</td>
        </tr>
        <tr>
          <th>320</th>
          <td>t8355</td>
          <td>P0DJI8</td>
          <td>SAA1</td>
          <td>Serum amyloid A-1 protein</td>
        </tr>
        <tr>
          <th>321</th>
          <td>t9441</td>
          <td>O15240</td>
          <td>VGF</td>
          <td>VGF nerve growth factor inducible</td>
        </tr>
      </tbody>
    </table>
    <p>322 rows × 4 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 39-41

Some of the data overlaps while some does not but all the metadata is combined
---------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 41-44

.. code-block:: Python


    challenge_data.metadata






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>age</th>
          <th>ethnicity</th>
          <th>race1</th>
          <th>...</th>
          <th>sex</th>
          <th>subject_id</th>
          <th>tissue</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>GSM7866964</th>
          <td>31.35</td>
          <td>Non Hispanic</td>
          <td>White</td>
          <td>...</td>
          <td>2</td>
          <td>BoA1</td>
          <td>blood</td>
        </tr>
        <tr>
          <th>GSM7866965</th>
          <td>79.45</td>
          <td>Non Hispanic</td>
          <td>Asian</td>
          <td>...</td>
          <td>1</td>
          <td>BoA2</td>
          <td>blood</td>
        </tr>
        <tr>
          <th>GSM7866966</th>
          <td>60.42</td>
          <td>Non Hispanic</td>
          <td>Asian</td>
          <td>...</td>
          <td>2</td>
          <td>BoA3</td>
          <td>blood</td>
        </tr>
        <tr>
          <th>GSM7866967</th>
          <td>59.24</td>
          <td>HISPANIC</td>
          <td>White</td>
          <td>...</td>
          <td>1</td>
          <td>BoA4</td>
          <td>blood</td>
        </tr>
        <tr>
          <th>GSM7866968</th>
          <td>22.41</td>
          <td>Non Hispanic</td>
          <td>White</td>
          <td>...</td>
          <td>1</td>
          <td>BoA5</td>
          <td>blood</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>P499</th>
          <td>80.98</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>1</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>P500</th>
          <td>89.00</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>1</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>P501</th>
          <td>80.92</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>2</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>P502</th>
          <td>69.80</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>1</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>P503</th>
          <td>68.18</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>1</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    <p>651 rows × 7 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 45-47

You can easily run several models on them
------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 47-57

.. code-block:: Python

    from biolearn.mortality import run_predictions

    prediction_dict = {
        "Horvathv1": "Predicted",
        "Hannum": "Predicted"
    }

    predictions = run_predictions(challenge_data, prediction_dict)
    predictions






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Horvathv1</th>
          <th>Hannum</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>GSM7866999</th>
          <td>21.822423</td>
          <td>17.303025</td>
        </tr>
        <tr>
          <th>GSM7867305</th>
          <td>56.266752</td>
          <td>52.803410</td>
        </tr>
        <tr>
          <th>GSM7867077</th>
          <td>39.660930</td>
          <td>36.211078</td>
        </tr>
        <tr>
          <th>GSM7867095</th>
          <td>29.806215</td>
          <td>32.821235</td>
        </tr>
        <tr>
          <th>GSM7867457</th>
          <td>51.285108</td>
          <td>49.308239</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>GSM7867136</th>
          <td>37.539954</td>
          <td>32.494127</td>
        </tr>
        <tr>
          <th>GSM7867452</th>
          <td>74.975617</td>
          <td>68.639608</td>
        </tr>
        <tr>
          <th>GSM7867431</th>
          <td>33.083565</td>
          <td>33.906176</td>
        </tr>
        <tr>
          <th>GSM7867126</th>
          <td>91.428559</td>
          <td>74.870807</td>
        </tr>
        <tr>
          <th>GSM7867000</th>
          <td>75.005273</td>
          <td>77.630528</td>
        </tr>
      </tbody>
    </table>
    <p>500 rows × 2 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 58-60

We can then compare the output from the two models
--------------------------------------------------------------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 60-74

.. code-block:: Python

    import matplotlib.pyplot as plt
    import seaborn as sns

    # Assuming your dataframe is named 'df'
    # df should have columns 'Horvathv1' and 'Hannum'

    # Create a scatter plot with a regression line
    plt.figure(figsize=(8, 6))
    sns.regplot(x='Horvathv1', y='Hannum', data=predictions, ci=None)

    plt.title('Scatter Plot with Regression Line')
    plt.xlabel('Horvathv1')
    plt.ylabel('Hannum')
    plt.grid(True)
    plt.show()


.. image-sg:: /auto_examples/02_challenge_submissions/images/sphx_glr_plot_challenge_data_001.png
   :alt: Scatter Plot with Regression Line
   :srcset: /auto_examples/02_challenge_submissions/images/sphx_glr_plot_challenge_data_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 25.779 seconds)

**Estimated memory usage:**  15006 MB


.. _sphx_glr_download_auto_examples_02_challenge_submissions_plot_challenge_data.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/bio-learn/biolearn/0.7.0?urlpath=lab/tree/notebooks/auto_examples/02_challenge_submissions/plot_challenge_data.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_challenge_data.ipynb <plot_challenge_data.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_challenge_data.py <plot_challenge_data.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
